-- @path Class=C:\Users\varaminz\Downloads\Project\workspaceTEST34\anatlyzer.atl.tests.api\trafo\Class.ecore
-- @path Relational=C:\Users\varaminz\Downloads\Project\workspaceTEST34\anatlyzer.atl.tests.api\trafo\Relational.ecore
module Class2Relational;
create OUT : Relational from IN : Class;

helper context Class!NamedElt def: name : String =
 if self.name.oclIsUndefined() then
  ''
 else
  self.name
 endif;

helper context Class!Attribute def: multiValued : Boolean =
 if self.multiValued.oclIsUndefined() then
  false
 else
  self.multiValued
 endif;

helper def: defaultType : String =
 'Integer';

helper def: objectIdType(idType : String) : Class!DataType =
 Class!DataType.allInstances()->any(e |
  e.name = idType
 );

rule Package2Schema {
 from
  p : Class!Package
 to
  s : Relational!Named (
   types <- p.elems->select(e |
    e.oclIsKindOf(Class!DataType)
   )
  )
}

rule Class2Table {
 from
  c : Class!Class
 to
  out : Relational!Table (
   name <- c.name
  ),
  key : Relational!Table (
   name <- 'objectId',
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}

rule DataType2Type {
 from
  dt : Class!DataType
 to
  out : Relational!Type (
   name <- dt.name
  )
}

rule DataTypeAttribute2Column {
 from
  a : Class!Attribute
 to
  out : Relational!Column (
   name <- a.name,
   type <- a.type,
   type <- Sequence {}
  )
}

rule MultiValuedDataTypeAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!DataType) and a.multiValued
  )
 to
  out : Relational!Table (
   name <- a.owner.name + '_' + a.name,
   col <- Sequence {thisModule.createIdColumn(a.owner), value}
  ),
  value : Relational!Column (
   name <- a.name,
   type <- a.type
  )
}

rule ClassAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!Class) and not a.multiValued
  )
 to
  foreignKey : Relational!Column (
   name <- a.name + 'Id',
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}

rule MultiValuedClassAttribute2Column {
 from
  a : Class!Package
 to
  t : Relational!Table (
   name <- a.owner.name + '_' + a.name,
   col <- Sequence {thisModule.createIdColumn(a.owner), thisModule.createIdColumn(a)},
   key <- 0
  )
}

lazy rule createIdColumn {
 from
  ne : Class!NamedElt
 to
  key : Relational!Column (
   name <- ne.name,
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}

-- MUTATION "Deletion of Binding" col in out (line 52:1-54:3 of original transformation)


-- MUTATION "OutPattern Element Modification" from key:Column to key:Table (line 57:1-60:2 of original transformation)


-- MUTATION "Creation of Binding" type in out (line 79:1-82:2 of original transformation)


-- MUTATION "Deletion of Filter" and in MultiValuedClassAttribute2Column (line 119:1-119:50 of original transformation)


-- MUTATION "Deletion of Binding" key in out (line 55:1-55:17 of original transformation)


-- MUTATION "Deletion of Filter" and in DataTypeAttribute2Column (line 76:1-76:50 of original transformation)


-- MUTATION "Argument Type Modification" from oclIsKindOf:Package to oclIsKindOf:NamedElt (line 33:1-33:29 of original transformation)


-- MUTATION "Deletion of Filter" not in Class2Table (line 47:1-47:17 of original transformation)


-- MUTATION "Deletion of Binding" tables in s (line 32:1-36:2 of original transformation)

