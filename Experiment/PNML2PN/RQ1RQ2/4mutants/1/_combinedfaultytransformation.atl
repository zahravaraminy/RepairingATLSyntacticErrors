-- @path PNML=/anatlyzer.evaluation.quickfixes.sosym2015/metamodels/PNML_simplified.ecore
-- @path PetriNet=/anatlyzer.evaluation.quickfixes.sosym2015/metamodels/PetriNet.ecore


-- MUTATION "InPattern Element Modification" from n:Arc to n:URI (line 88:3-88:15 of original transformation)
-- MUTATION "Deletion of Binding" name in p (line 96:4-96:96 of original transformation)
-- MUTATION "Binding-target Modification" from location to name (line 57:4-57:26 of original transformation)
-- MUTATION "Navigation Modification" from n.location to n.id (line 57:16-57:26 of original transformation)

module PNML2PetriNet;
create OUT : PetriNet from IN : PNML;

rule PetriNet {
from
n : PNML!PNMLDocument
using
{
elementsSet : Sequence(PNML!NetContentElement) = PNML!NetContentElement.allInstances();
arcsSet : Sequence(PNML!Arc) = PNML!Arc.allInstances()->select(a |
a.source.oclIsKindOf(PNML!Place) and a.target.oclIsKindOf(PNML!Transition) or a.source.oclIsKindOf(PNML!Transition) and a.target.oclIsKindOf(PNML!Place)
); -- This encodes a pre-condition

}
to
p : PetriNet!PetriNet (
location <- n.location,
name <- if not n.nets->first().name.oclIsUndefined() then
n.nets->first().name.labels->first().text
else
'aPetriNet'
endif,
elements <- elementsSet,
arcs <- arcsSet
)
} 

rule Place {
from
n : PNML!Place
to
p : PetriNet!Place (
location <- n.location,
name <- if not n.name.oclIsUndefined() then
n.name.labels->first().text
else
'default'
endif,
net <- n.net.document
)
} 

rule Transition {
from
n : PNML!Transition
to
p : PetriNet!Transition (
name <- n.id,
name <- if not n.name.oclIsUndefined() then
n.name.labels->first().text
else
'default'
endif,
net <- n.net.document
)
} 

rule PlaceToTransition {
from
n : PNML!Arc
(
n.source.oclIsKindOf(PNML!Place) and n.target.oclIsKindOf(PNML!Transition)
)
to
p : PetriNet!PlaceToTransition (
location <- n.location,
name <- if not n.name.oclIsUndefined() then
n.name.labels->first().text
else
'default'
endif,
net <- n.net.document,
from <- n.source,
to <- n.target
)
} 

rule TransitionToPlace {
from
n : PNML!URI
(
n.source.oclIsKindOf(PNML!Transition) and n.target.oclIsKindOf(PNML!Place)
)
to
p : PetriNet!TransitionToPlace (
location <- n.location,
net <- n.net.document,
from <- n.source,
to <- n.target
)
}
