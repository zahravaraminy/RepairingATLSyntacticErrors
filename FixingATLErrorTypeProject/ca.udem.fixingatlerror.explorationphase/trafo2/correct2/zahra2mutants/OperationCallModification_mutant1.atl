-- @path PNML=D:\java\ATLproject\neonssmallprojects\anatlyzer.evaluation.mutants\trafo\PNML.ecore
-- @path PetriNet=D:\java\ATLproject\neonssmallprojects\anatlyzer.evaluation.mutants\trafo\PetriNet.ecore

-- MUTATION "Deletion of Rule" Transition in PNML2PetriNet (line 38:1-48:2 of original transformation)


-- MUTATION "Collection Type Modification" from SequenceType:Label to SequenceType:NetElement (line 21:31-21:51 of original transformation)


-- MUTATION "Parameter Type Modification" from labels:SequenceType to labels:BagType (line 21:24-21:51 of original transformation)


-- MUTATION "Binding-target Modification" from elements to arcs (line 16:4-16:26 of original transformation)


-- MUTATION "Collection Operation Call Modification" from first to notEmpty (line 23:7-23:22 of original transformation)


-- MUTATION "Operator Modification" from and to <= (line 71:5-72:41 of original transformation)


-- MUTATION "Operation Call Modification" from oclIsKindOf to abs (line 54:4-54:36 of original transformation)

module PNML2PetriNet;
create OUT : PetriNet from IN : PNML;

rule PetriNet {
 from
  n : PNML!NetElement
 using
 {
  arcsSet : Set(PNML!NetContentElement) = n.contents->select(e |
   e.oclIsKindOf(PNML!Arc)
  );
 }
 to
  p : PetriNet!PetriNet (
   arcs <- n.contents,
   arcs <- arcsSet
  )
}

helper def: selectLabel(labels : Bag(PNML!NetElement)) : String =
 if labels->isEmpty() then
  'no-name'
 else
  labels->notEmpty().text
 endif;

rule Place {
 from
  n : PNML!Place
 to
  p : PetriNet!Place (
   name <- if not n.name.oclIsUndefined() then
    thisModule.selectLabel(n.name.labels)
   else
    ''
   endif
  )
}

rule PlaceToTransition {
 from
  n : PNML!Arc
  (
   n.source.abs(PNML!Place) and n.target.oclIsKindOf(PNML!Transition)
  )
 to
  p : PetriNet!PlaceToTransition (
   name <- if not n.name.oclIsUndefined() then
    thisModule.selectLabel(n.name.labels)
   else
    ''
   endif,
   start <- n.source,
   end <- n.target
  )
}

rule TransitionToPlace {
 from
  n : PNML!Arc
  (
   n.target.oclIsKindOf(PNML!Place) <= not n.source.oclIsKindOf(PNML!Place)
  )
 to
  p : PetriNet!TransitionToPlace (
   name <- if not n.name.oclIsUndefined() then
    thisModule.selectLabel(n.name.labels)
   else
    ''
   endif,
   start <- n.source,
   end <- n.target
  )
}
