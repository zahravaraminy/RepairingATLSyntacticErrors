-- @path PNML=D:\java\ATLproject\neonssmallprojects\anatlyzer.evaluation.mutants\trafo\PNML.ecore
-- @path PetriNet=D:\java\ATLproject\neonssmallprojects\anatlyzer.evaluation.mutants\trafo\PetriNet.ecore
-- MUTATION "Deletion of Binding" arcs in p (line 25:4-25:19 of original transformation)
-- MUTATION "Collection Type Modification" from SequenceType:NetContentElement to SequenceType:Transition (line 14:17-14:49 of original transformation)
-- MUTATION "InPattern Element Modification" from n:Arc to n:NetElement (line 84:3-84:15 of original transformation)
-- MUTATION "OutPattern Element Modification" from p:Transition to p:Arc (line 52:3-60:4 of original transformation)

-- MUTATION "Binding-target Modification" from location to weight (line 92:4-92:26 of original transformation)

module PNML2PetriNet;
create OUT : PetriNet from IN : PNML;

rule PetriNet {
 from
  n : PNML!PNMLDocument
 using
 {
  elementsSet : Sequence(PNML!Transition) = PNML!NetContentElement.allInstances();
  arcsSet : Sequence(PNML!Arc) = PNML!Arc.allInstances()->select(a |
   a.source.oclIsKindOf(PNML!Place) and a.target.oclIsKindOf(PNML!Transition) or a.source.oclIsKindOf(PNML!Transition) and a.target.oclIsKindOf(PNML!Place)
  );
 }
 to
  p : PetriNet!PetriNet (
   location <- n.location,
   name <- if not n.nets->first().name.oclIsUndefined() then
    n.nets->first().name.labels->first().text
   else
    'aPetriNet'
   endif,
   elements <- elementsSet
  )
}

rule Place {
 from
  n : PNML!URI
 to
  p : PetriNet!PetriNet (
   location <- n.location,
   name <- if not n.name.oclIsUndefined() then
    n.name.labels->first().text
   else
    'default'
   endif,
   net <- n.net.document
  )
}

rule Transition {
 from
  n : PNML!Transition
 to
  p : PetriNet!Arc (
   location <- n.location,
   name <- if not n.name.oclIsUndefined() then
    n.name.labels->first().text
   else
    'default'
   endif,
   net <- n.net.document
  )
}

rule PlaceToTransition {
 from
  n : PNML!Arc
  (
   n.source.oclIsKindOf(PNML!Place) and n.target.oclIsKindOf(PNML!Transition)
  )
 to
  p : PetriNet!PlaceToTransition (
   location <- n.location,
   name <- if not n.name.oclIsUndefined() then
    n.name.labels->first().text
   else
    'default'
   endif,
   net <- n.net.document,
   from <- n.source,
   to <- n.target
  )
}

rule TransitionToPlace {
 from
  n : PNML!NetElement
  (
   n.source.oclIsKindOf(PNML!Transition) and n.target.oclIsKindOf(PNML!Place)
  )
 to
  p : PetriNet!TransitionToPlace (
   weight <- n.location,
   name <- if not n.name.oclIsUndefined() then
    n.name.labels->first().text
   else
    'default'
   endif,
   net <- n.net.document,
   from <- n.source,
   to <- n.target
  )
}
