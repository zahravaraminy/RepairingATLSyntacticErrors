-- @path Class=C:\Users\varaminz\Downloads\Project\workspaceTEST34\anatlyzer.atl.tests.api\trafo\Class.ecore
-- @path Relational=C:\Users\varaminz\Downloads\Project\workspaceTEST34\anatlyzer.atl.tests.api\trafo\Relational.ecore
module Class2Relational;
create OUT : Relational from IN : Class;

helper context Class!NamedElt def: name : String =
 if self.name.oclIsUndefined() then
  ''
 else
  self.name
 endif;

helper context Class!Attribute def: multiValued : Boolean =
 if self.multiValued.oclIsUndefined() then
  false
 else
  self.multiValued
 endif;

helper def: defaultType : String =
 'Integer';

helper def: objectIdType(idType : String) : Class!DataType =
 Class!DataType.allInstances()->any(e |
  e.name = idType
 );

rule Package2Schema {
 from
  p : Class!NamedElt
 to
  s : Relational!Type (
   types <- p.elems->select(e |
    e.oclIsKindOf(Class!DataType)
   ),
   name <- p.name
  )
}

rule Class2Table {
 from
  c : Class!Classifier
  (
   not c.isAbstract
  )
 to
  out : Relational!Named (
   name <- c.name,
   col <- Sequence {key}->union(c.att->select(e |
    not e.multiValued
   )),
   col <- c.owner
  ),
  key : Relational!Column (
   name <- 'objectId',
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}

rule DataType2Type {
 from
  dt : Class!Package
 to
  out : Relational!Schema (
   name <- dt.name,
   key <- dt.elems
  )
}

rule DataTypeAttribute2Column {
 from
  a : Class!DataType
  (
   a.type.oclIsKindOf(Class!Schema) and not a.multiValued
  )
 to
  out : Relational!Column (
   name <- a.name,
   type <- a.type
  )
}

rule MultiValuedDataTypeAttribute2Column {
 from
  a : Class!NamedElt
  (
   a.type.oclIsKindOf(Class!Classifier) and a.multiValued
  )
 to
  out : Relational!NamedElt (
   col <- Sequence {thisModule.createIdColumn(a.owner), value}
  ),
  value : Relational!Column (
   name <- a.name,
   type <- a.type,
   tables <- a.tables
  )
}

rule ClassAttribute2Column {
 from
  a : Class!Package
  (
   a.type.oclIsKindOf(Class!Class) and not a.multiValued
  )
 to
  foreignKey : Relational!Named (
   name <- a.name + 'Id',
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}

rule MultiValuedClassAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!Column) and a.multiValued
  )
 to
  t : Relational!Classifier (
   name <- a.owner.name + '_' + a.name,
   col <- Sequence {thisModule.createIdColumn(a.owner), thisModule.createIdColumn(a)}
  )
}

lazy rule createIdColumn {
 from
  ne : Class!NamedElt
 to
  key : Relational!Column (
   name <- ne.name,
   type <- thisModule.objectIdType(thisModule.defaultType),
   col <- ne.name
  )
}

-- MUTATION "Deletion of Binding" name in out (line 82:4-82:39 of original transformation)


-- MUTATION "OutPattern Element Modification" from s:Schema to s:Type (line 29:10-33:6 of original transformation)


-- MUTATION "Deletion of Binding" tables in out (line 44:4-44:22 of original transformation)


-- MUTATION "Deletion of Binding" tables in s (line 30:6-30:92 of original transformation)


-- MUTATION "InPattern Element Modification" from a:Attribute to a:NamedElt (line 77:3-77:22 of original transformation)


-- MUTATION "Argument Type Modification" from oclIsKindOf:DataType to oclIsKindOf:Classifier (line 78:4-78:38 of original transformation)


-- MUTATION "OutPattern Element Modification" from foreignKey:Column to foreignKey:Named (line 98:3-101:4 of original transformation)


-- MUTATION "InPattern Element Modification" from dt:DataType to dt:Package (line 55:3-55:22 of original transformation)


-- MUTATION "InPattern Element Modification" from c:Class to c:Classifier (line 38:3-38:18 of original transformation)

