-- @path Class=/class2table/metamodels/Class.ecore
-- @path Relational=/class2table/metamodels/Relational.ecore


-- MUTATION "Operation Call Modification" from oclIsKindOf to startsWith (line 33:34-33:63 of original transformation)
-- MUTATION "Deletion of Binding" type in out (line 70:4-70:18 of original transformation)
-- MUTATION "Binding-target Modification" from name to type (line 97:4-97:25 of original transformation)
-- MUTATION "Collection Operation Call Modification" from union to includesAll (line 43:11-43:70 of original transformation)
-- MUTATION "OutPattern Element Modification" from out:Type to out:Schema (line 57:3-59:4 of original transformation)
-- MUTATION "InPattern Element Modification" from c:Class to c:Package (line 39:3-39:18 of original transformation)


module Class2Relational;
create OUT : Relational from IN : Class;


-- inheritance not supported yet
helper context Class!NamedElt def: name : String =
if self.name.oclIsUndefined() then
''
else
self.name
endif;

helper context Class!Attribute def: multiValued : Boolean =
if self.multiValued.oclIsUndefined() then
false
else
self.multiValued
endif;

helper def: defaultType : String =
'Integer';

helper def: objectIdType(idType : String) : Class!DataType =
Class!DataType.allInstances()->any(e |
e.name = idType
);

rule Package2Schema {
from
p : Class!Package
to
s : Relational!Schema (
tables <- p.elems->select(e |
e.oclIsKindOf(Class!Class)
)->reject(e |
e.isAbstract
),
types <- p.elems->select(e |
e.startsWith(Class!DataType)
)
)
}

rule Class2Table {
from
c : Class!Package
(
not c.isAbstract
)
to
out : Relational!Table (
name <- c.name,
col <- Sequence {key}->includesAll(c.att->select(e |
not e.multiValued
)),
key <- Set {key}
),
key : Relational!Column (
name <- 'objectId',
type <- thisModule.objectIdType(thisModule.defaultType)
)
}

rule DataType2Type {
from
dt : Class!DataType
to
out : Relational!Schema (
name <- dt.name
)
}

rule DataTypeAttribute2Column {
from
a : Class!Attribute
(
a.type.oclIsKindOf(Class!DataType) and not a.multiValued
)
to
out : Relational!Column (
name <- a.name
)
}

rule MultiValuedDataTypeAttribute2Column {
from
a : Class!Attribute
(
a.type.oclIsKindOf(Class!DataType) and a.multiValued
)
to
out : Relational!Table (
name <- a.owner.name + '_' + a.name,
col <- Sequence {thisModule.createIdColumn(a.owner), value}
),
value : Relational!Column (
name <- a.name,
type <- a.type
)
}

rule ClassAttribute2Column {
from
a : Class!Attribute
(
a.type.oclIsKindOf(Class!Class) and not a.multiValued
)
to
foreignKey : Relational!Column (
type <- a.name + 'Id',
type <- thisModule.objectIdType(thisModule.defaultType)
)
}

rule MultiValuedClassAttribute2Column {
from
a : Class!Attribute
(
a.type.oclIsKindOf(Class!Class) and a.multiValued
)
to
t : Relational!Table (
name <- a.owner.name + '_' + a.name,
col <- Sequence {thisModule.createIdColumn(a.owner), thisModule.createIdColumn(a)}
)
}

lazy rule createIdColumn {
from
ne : Class!NamedElt
to
key : Relational!Column (
name <- ne.name,
type <- thisModule.objectIdType(thisModule.defaultType)
)
}
