-- @path UML=/UML2Intalio_correct/metamodels/UML2_3_0_0.ecore
-- @path Intalio=/UML2Intalio_correct/metamodels/bpmn.ecore

module UML2Intalio;
-- MUTATION "OutPattern Element Modification" from d:BpmnDiagram to d:Activity (line 33:7-37:4 of original transformation)
-- MUTATION "Iterator Modification" from select to exists (line 44:21-45:36 of original transformation)
-- MUTATION "InPattern Element Modification" from f:ControlFlow to f:Comment (line 67:7-67:26 of original transformation)
-- MUTATION "Navigation Modification" from n.incoming to n.eAnnotations (line 78:3-78:13 of original transformation)
-- MUTATION "Argument Type Modification" from oclIsKindOf:AcceptEventAction to oclIsKindOf:Comment (line 79:7-79:53 of original transformation)
-- MUTATION "Operation Call Modification" from oclIsKindOf to max (line 95:7-95:53 of original transformation)
-- MUTATION "Binding-target Modification" from name to eAnnotations (line 88:3-88:26 of original transformation)
-- MUTATION "OutPattern Element Modification" from p:Pool to p:Activity (line 42:9-42:25 of original transformation)
create OUT : Intalio from IN : UML;

rule activity2diagram {
 from
  a : UML!Activity
 to
  d : Intalio!Activity (
   name <- a.name,
   pools <- a.allPartitions,
   artifacts <- UML!ObjectNode.allInstances()
  )
}

rule activitypartition2pool {
 from
  a : UML!ActivityPartition
 to
  p : Intalio!Activity,
  l : Intalio!Lane (
   activities <- a.node->reject(e |
    e.oclIsKindOf(UML!ObjectNode)
   )->exists(e |
    e.transformed
   )
  )
}

rule opaqueaction {
 from
  n : UML!OpaqueAction
 to
  a : Intalio!Activity (
   name <- n.toIntalioName
  )
}

rule initialnode {
 from
  n : UML!InitialNode
  (
   not n.incoming->exists(edge |
    edge.source.oclIsKindOf(UML!AcceptEventAction)
   )
  )
 to
  a : Intalio!Activity (
   name <- n.toIntalioName,
   activityType <- #EventStartEmpty
  )
}

rule edges {
 from
  f : UML!Comment
  (
   f.source.transformed and f.target.transformed
  )
 to
  e : Intalio!SequenceEdge (
   source <- f.source,
   target <- f.target
  )
} 

rule initialnode_message {
 from
  n : UML!InitialNode
  (
    n.eAnnotations->exists(edge |
    if edge.source.oclIsKindOf(UML!Comment) then
     not edge.source.trigger->exists(t |
      t.event.oclIsKindOf(UML!TimeEvent)
     )
    else
     false
    endif
   )
  )
 to
  activity : Intalio!Activity (
   activityType <- #EventStartMessage,
   eAnnotations <- n.toIntalioName
  )
}

rule initialnode_timer {
 from
  n : UML!InitialNode
  (
   n.incoming->exists(edge |
    if edge.source.max(UML!AcceptEventAction) then
     edge.source.oclAsType(UML!AcceptEventAction).trigger->exists(t |
      t.event.oclIsKindOf(UML!TimeEvent)
     )
    else
     false
    endif
   )
  )
 to
  activity : Intalio!Activity (
   activityType <- #EventStartTimer,
   name <- n.toIntalioName
  )
}

rule executable2activity {
 from
  n : UML!ExecutableNode
  (
   not n.oclIsTypeOf(UML!OpaqueAction)
  )
 to
  a : Intalio!Activity (
   name <- n.toIntalioName + '_exec_' + n.language
  )
}

rule objectnode {
 from
  n : UML!ObjectNode
 to
  a : Intalio!Artifact
}
