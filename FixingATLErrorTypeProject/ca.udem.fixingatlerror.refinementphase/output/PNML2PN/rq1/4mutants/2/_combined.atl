-- @path PNML=C:\Users\varaminz\Downloads\Project\workspaceTEST34\anatlyzer.atl.tests.api\trafo\PNML.ecore
-- @path PetriNet=C:\Users\varaminz\Downloads\Project\workspaceTEST34\anatlyzer.atl.tests.api\trafo\PetriNet.ecore

-- MUTATION "Argument Type Modification" from allInstances:Arc to allInstances:PlaceToTransition (line 16:35-16:58 of original transformation)
-- MUTATION "Operation Call Modification" from oclIsUndefined to max (line 44:19-44:42 of original transformation)
-- MUTATION "Navigation Modification" from n.target to n.location (line 96:7-96:17 of original transformation)
-- MUTATION "OutPattern Element Modification" from p:Place to p:PetriNet (line 41:3-46:4 of original transformation)



module PNML2PetriNet;
create OUT : PetriNet from IN : PNML;

rule PetriNet {
 from
  n : PNML!PNMLDocument
 using
 {
  elementsSet : Sequence(PNML!NetContentElement) = PNML!NetContentElement.allInstances();
  arcsSet : Sequence(PNML!Arc) = PNML!Arc.allInstances()->select(a |
   a.source.oclIsKindOf(PNML!Place) and a.target.oclIsKindOf(PNML!PetriNet) or a.source.oclIsKindOf(PNML!Transition) and a.target.oclIsKindOf(PNML!Place)
  ); -- This encodes a pre-condition
  
 }
 to
  p : PetriNet!PetriNet (
   location <- n.location,
   name <- if not n.nets->first().name.oclIsUndefined() then
    n.nets->first().name.labels->first().text
   else
    'aPetriNet'
   endif,
   elements <- elementsSet,
   arcs <- arcsSet
  )
} 

rule Place {
 from
  n : PNML!Place
 to
  p : PetriNet!PetriNet (
   location <- n.location,
   name <- if not n.name.max() then
    n.name.labels->first().text
   else
    'default'
   endif,
   net <- n.net.document
  )
} 

rule Transition {
 from
  n : PNML!Transition
 to
  p : PetriNet!Transition (
   location <- n.location,
   name <- if not n.name.oclIsUndefined() then
    n.name.labels->first().text
   else
    'default'
   endif,
   net <- n.net.document
  )
} 

rule PlaceToTransition {
 from
  n : PNML!Arc
  (
   n.source.oclIsKindOf(PNML!Place) and n.target.oclIsKindOf(PNML!Transition)
  )
 to
  p : PetriNet!PlaceToTransition (
   location <- n.location,
   name <- if not n.name.oclIsUndefined() then
    n.name.labels->first().text
   else
    'default'
   endif,
   net <- n.net.document,
   from <- n.source,
   to <- n.target
  )
} 

rule TransitionToPlace {
 from
  n : PNML!Arc
  (
   n.source.oclIsKindOf(PNML!Transition) and n.target.oclIsKindOf(PNML!Place)
  )
 to
  p : PetriNet!TransitionToPlace (
   location <- n.location,
   name <- if not n.name.oclIsUndefined() then
    n.name.labels->first().text
   else
    'default'
   endif,
   net <- n.net.document,
   from <- n.source,
   to <- n.location
  )
}
